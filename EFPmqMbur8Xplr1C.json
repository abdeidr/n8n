{
  "active": false,
  "connections": {
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Extract Emails from Main Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construir URL": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Diferenciar nicho de ciudad": {
      "main": [
        [
          {
            "node": "Construir URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mapeo de texto": {
      "main": [
        [
          {
            "node": "Diferenciar nicho de ciudad",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter1": {
      "main": [
        [
          {
            "node": "Borrar duplicados1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Borrar duplicados": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Borrar duplicados1": {
      "main": [
        [
          {
            "node": "Filter3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter2": {
      "main": [
        [
          {
            "node": "Borrar duplicados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract URLs1": {
      "main": [
        [
          {
            "node": "Filter2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Mapeo de texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Extract URLs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Filter3": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Main Page": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Emails from Main Page": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Main Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-16T17:25:16.636Z",
  "id": "EFPmqMbur8Xplr1C",
  "isArchived": false,
  "meta": null,
  "name": "buscar autoescuelas",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1776,
        1648
      ],
      "id": "9ed5357e-6fd3-48a6-8c2b-0e3a37018b99",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2512,
        1264
      ],
      "id": "1f3a4828-829b-4ff4-98e1-c356c5c4d86c",
      "name": "Wait",
      "webhookId": "REDACTED"
    },
    {
      "parameters": {
        "maxItems": 100
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1488,
        1648
      ],
      "id": "4f95de68-4b58-4261-84db-88d8654733b4",
      "name": "Limit"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42862ea8-a8c9-4f54-9dbd-898e9f4fe8a9",
              "name": "maps_url",
              "value": "={{ \n  (() => {\n    const niche = $json.niche;\n    const city = $json.city;\n    const query = `${niche} ${city}`;\n    const gl = 'es'; // cambiar si quieres usar otro país (ej: 'mx', 'cl', 'ar', etc.)\n    return `https://www.google.com/maps/search/${encodeURIComponent(query)}?hl=es&gl=${gl}&region=${gl}`;\n  })() \n}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1280,
        592
      ],
      "id": "bbdf4871-88e5-45a1-94be-421b05108660",
      "name": "Construir URL"
    },
    {
      "parameters": {
        "jsCode": "// Función para quitar tildes y limpiar texto\nconst normalize = (str) =>\n  str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase().trim();\n\nconst originalText = $json.text || '';\nconst text = normalize(originalText);\n\n// Nuevos patrones: buscame, quiero, necesito, hay... [nicho] en [ciudad]\nconst regex = /\\b(?:busc(a|ame|qu?ame)|quiero|necesito|hay)\\s+(.*?)\\s+en\\s+(.+?)([.,\\s]|$)/i;\nconst match = text.match(regex);\n\nif (match && match[2] && match[3]) {\n  const niche = match[2].trim();\n  const city = match[3].trim();\n  return [\n    {\n      json: {\n        niche,\n        city,\n        original: originalText\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        error: \"❌ No se pudo extraer el nicho y la ciudad.\",\n        original: originalText\n      }\n    }\n  ];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        384
      ],
      "id": "3c000fc7-963f-43e2-b459-a7f3f27b032c",
      "name": "Diferenciar nicho de ciudad"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a7f57ab7-bd4f-408b-83d9-67943051eeed",
              "name": "text",
              "value": "=autoescuela madrid",
              "type": "string"
            },
            {
              "id": "eadd1633-51b1-401d-8eb3-bc1d3cafe61a",
              "name": "GOOGLE_PLACES_API_KEY",
              "value": "[REDACTED]",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        368
      ],
      "id": "3f1f9a82-f8b6-4376-8fe0-99b7d9888611",
      "name": "Mapeo de texto"
    },
    {
      "parameters": {
        "url": "={{ $json.maps_url }}",
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {
              "maxRedirects": 2
            }
          },
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1744,
        784
      ],
      "id": "e837cbec-2942-413c-8eed-8c7ca6c2f716",
      "name": "Scrapeo Google Maps"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f8764305-bad4-43ab-9d57-3a71f27ad572",
              "leftValue": "={{ $json.email_final }}",
              "rightValue": "-",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "c4b58c6a-0f92-4a48-a9fd-ec9180e6ddd6",
              "leftValue": "={{ $json.email_final }}",
              "rightValue": "_",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "f7f97e1f-e0a3-46c4-a63e-93a28fc03b70",
              "leftValue": "={{ $json.email_final }}",
              "rightValue": "book",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        3504,
        1168
      ],
      "id": "f2ad3559-1295-4375-8f83-807b97e4c28b",
      "name": "Filter1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        1488,
        1392
      ],
      "id": "8a9f0fa7-cf30-484b-8b9b-5eafa5184044",
      "name": "Borrar duplicados"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        3664,
        1392
      ],
      "id": "104d0d75-9390-4896-b9b2-f3aeb702c585",
      "name": "Borrar duplicados1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a0c892e7-3f34-428c-afee-60df996b500c",
              "leftValue": "={{ $json.website }}",
              "rightValue": "schema",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "ee97ab7a-9921-4c3b-95dd-2ede83a31a25",
              "leftValue": "={{ $json.website }}",
              "rightValue": "google",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "6326ca6f-8dc1-4ef4-8325-31100e23f0db",
              "leftValue": "={{ $json.website }}",
              "rightValue": "gg",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "2b01c0dd-ec51-43b9-84f8-fd080a446e24",
              "leftValue": "={{ $json.website }}",
              "rightValue": "gstatic",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "6659d028-9d54-4fac-8f53-930c3c832680",
              "leftValue": "={{ $json.website }}",
              "rightValue": "whatsapp",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "7edbb875-1e2b-470a-8092-8c70f344232f",
              "leftValue": "={{ $json.website }}",
              "rightValue": "wa.link",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "1aafcb3c-5a40-4483-9dfc-a5c944938457",
              "leftValue": "={{ $json.website }}",
              "rightValue": "facebook",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "f486bcab-39f1-4726-a0c3-2c1afd5498ec",
              "leftValue": "={{ $json.website }}",
              "rightValue": "wa.me",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "34412eb6-1ce0-4077-aac8-d9c4c35a89c7",
              "leftValue": "={{ $json.website }}",
              "rightValue": "www.",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "18bdea02-0121-4887-996a-7b4c5c5dfc45",
              "leftValue": "={{ $json.website }}",
              "rightValue": "instagram",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        352,
        1024
      ],
      "id": "c07dd508-4605-473e-963a-20a94b955a70",
      "name": "Filter2"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first().json;\n\n// Los datos están directamente en el nivel raíz, no en .data\nif (!inputData.places || inputData.places.length === 0) {\n  return [];\n}\n\nreturn inputData.places.map((place, index) => ({\n  json: {\n    name: place.displayName?.text || '',\n    website: place.websiteUri || '',\n    address: place.formattedAddress || '',\n    phone: place.nationalPhoneNumber || '',\n    rating: place.rating || 0,\n    reviewCount: place.userRatingCount || 0,\n    businessStatus: place.businessStatus || '',\n    googleMapsUrl: place.googleMapsUri || ''\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        112,
        1024
      ],
      "id": "a7f28821-dac7-4206-ac83-7c2df8d28c4f",
      "name": "Extract URLs1"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 11
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        480,
        160
      ],
      "id": "7bf0df0f-7a6f-4a2c-bd90-ca51b7d40916",
      "name": "Schedule Trigger1"
    },
    {
      "parameters": {
        "content": "## 🌐 Scraping de negocios locales por nicho y ciudad\n\nEste flujo automatiza la extracción de URLs de negocios desde **Google Maps**,\nen función de los datos generados por un agente GPT que define el nicho (tipo de negocio) y la ciudad.\n\n### 🧩 Descripción del flujo paso a paso:\n\n1. **Schedule Trigger**  \n   Activa el flujo de forma automática en el horario que\ndefinamos (diariamente, semanal, etc.).\n\n2. **OpenAI (Message Model)**  \n   El agente genera una búsqueda como:  \n   `\"Búscame clínicas dentales en Valencia\"`  \n   Esta frase define el **nicho** y la **ciudad** para el scraping.\n\n3. **Edit Fields**  \n   Se ajustan los campos necesarios para trabajar la frase generada por el agente.\n\n4. **Code (Parser)**  \n   Separamos y estructuramos la frase del agente para obtener dos variables: `nicho` y `ciudad`.\n\n5. **Construir URL**  \n   Creamos una URL de búsqueda de Google Maps basada en esas variables:  \n   `https://www.google.com/maps/search/{nicho}+en+{ciudad}`\n\n6. **Scrape Google Maps**  \n   Usamos esa URL para hacer scraping de resultados de negocios directamente desde Google Maps.\n\n7. **Extract URLs**  \n   Extraemos las URLs individuales de los resultados de Google Maps.\n\n8. **Filter**  \n   Aplicamos un filtro para asegurarnos de que solo se pasen URLs válidas o relevantes (por ejemplo, que contengan \"http\", o sean de ficha de negocio).\n\n9. **Remove Duplicates**  \n   Eliminamos URLs duplicadas para asegurar resultados únicos.\n\n10. **Limit**  \n   Limitamos el número de resultados (por ejemplo, a 10) para controlar la carga y mantener eficiencia en el procesamiento posterior.\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### ✅ Resultado:\nEl flujo devuelve una lista de sitios web reales y locales, filtrados y únicos, listos para usar en campañas, análisis o automatización comercial.\n\n**Hecho con ❤️ por [Juan Pe Navarro](https://www.youtube.com/@juanpe.divisual)**\n",
        "height": 1880,
        "width": 1240,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "f7842ab1-4e95-4271-bb7b-d9a05aff2c61",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Plantilla Google Sheet\n[Click aqui](https://docs.google.com/spreadsheets/d/1xUzEgPtPdGVEAsMQ-loiTd5zUCnglGsAPxGw2y1u6O4/edit?gid=0#gid=0)",
        "height": 120
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3776,
        2160
      ],
      "id": "98e8c366-3b5c-48e0-b69c-8671c6a42c37",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "# 🚀 La Tribu Divisual\n\n## Este agente tiene un valor en el mercado de **$4.500.**\n\n\n## Accede a **La Tribu Divisual** para aprender a crear agentes más avanzados y a generar altos ingresos con ellos de forma real y segura.\n\n# 👉 [Click aquí para unirte a la Lista de espera](https://divisualproject.academy/)\n",
        "height": 360,
        "width": 760,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2848,
        2000
      ],
      "id": "f3dfdfc2-9d6f-431f-a443-6e659c0f6b82",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "[REDACTED]",
          "mode": "list",
          "cachedResultName": "scrapping email gratis",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Tlhp4SmZWqCWdiNhGOLaxnhpcY8-q1dNv1Ut-684qhc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Tlhp4SmZWqCWdiNhGOLaxnhpcY8-q1dNv1Ut-684qhc/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "NEGOCIO": "={{ $('Loop Over Items').item.json.name }}",
            "TELEFONO": "={{ $('Loop Over Items').item.json.phone }}",
            "WEB": "={{ $('Loop Over Items').item.json.website }}",
            "CORREO": "={{ $json.email_final }}",
            "RATING": "={{ $('Extract URLs1').item.json.rating }}",
            "DIRECCION": "={{ $('Extract URLs1').item.json.address }}",
            "ESTADO": "Sin enviar",
            "TIPO DE NEGOCIO": "={{ $('AI Agent1').item.json.output }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "NEGOCIO",
              "displayName": "NEGOCIO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "TELEFONO",
              "displayName": "TELEFONO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "WEB",
              "displayName": "WEB",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CORREO",
              "displayName": "CORREO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "RATING",
              "displayName": "RATING",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DIRECCION",
              "displayName": "DIRECCION",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ESTADO",
              "displayName": "ESTADO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "TIPO DE NEGOCIO",
              "displayName": "TIPO DE NEGOCIO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        4016,
        1648
      ],
      "id": "e31a379a-f057-4f3e-9fa3-81f108d47db6",
      "name": "Append row in sheet",
      "credentials": {}
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "GPT-4"
        },
        "messages": {
          "values": [
            {
              "content": "=Actúa como un usuario que está realizando una búsqueda rápida y directa. \n\nTu tarea es generar una frase corta del estilo:  \n**\"Búscame [tipo de negocio] en [una ciudad o pueblo (+50.000 habitantes) aleatoria de una provicia aleatoria de españa]\"**.\n\n## TIPOS DE NEGOCIOS (elige uno aleatorio en cada iteración)\n- médicos\n- abogados\n- clínicas dentales\n- dentistas\n- inmobiliarias\n- asesorías\n- clínicas médicas\n- clínicas de belleza\n- Salones de belleza\n- Masajistas\n- Odontólogos\n- Osteópatas\n\n## REQUERIMIENTOS\n\n- Varía constantemente el tipo de negocio.\n- Varía la provincia de forma aleatoria entre todas las provincias de España.\n- Varía la ciudad de forma aleatoria entre todas las provincias de España.\n- Varía el pueblo de forma aleatoria entre todas las provincias de España.\n- La frase debe ser simple, informal y directa. No añadas explicaciones ni repitas formatos exactos.\n- La provincia debe ser siempre española.\n\nEjemplos de posibles respuestas:\n- \"Búscame médicos en Sevilla.\"\n- \"Búscame inmobiliarias en Zaragoza.\"\n- \"Búscame clínicas dentales en Valencia.\"\n\nDevuelve solo una frase por vez. Cambia cada vez que se active.\n\nNo repitas los mismos [tipos de negocio] ni los mismas [provincias] de manera consecutiva."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        400,
        768
      ],
      "id": "fa1dfc2e-1347-4a6f-ac24-f547ef36fce7",
      "name": "Message a model",
      "credentials": {}
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "93aba9a9-8138-4f6b-bd07-658f7dee565e",
              "name": "text",
              "value": "Búscame inmobiliarias en huelva",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1088,
        160
      ],
      "id": "3bcdbded-c6b8-4f02-a00e-4a66a9dd077b",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "messages": {
          "values": [
            {
              "content": "=Actúa como un usuario que está realizando una búsqueda rápida y directa. \n\nTu tarea es generar una frase corta del estilo:\n\"Búscame [tipo de negocio] en [un municipio aleatorio de España con más de 10.000 habitantes]\".\n\nTIPOS DE NEGOCIOS (elige uno aleatorio en cada iteración)\n\nmédicos\n\nabogados\n\nclínicas dentales\n\ndentistas\n\ninmobiliarias\n\nclínicas médicas\n\nclínicas de belleza\n\nSalones de belleza\n\nMasajistas\n\nOdontólogos\n\nOsteópatas\n\nREQUERIMIENTOS\n\nVaría constantemente el tipo de negocio.\n\nVaría el municipio de forma aleatoria entre todos los municipios de España con más de 10.000 habitantes.\n\nLa frase debe ser simple, informal y directa. No añadas explicaciones ni repitas formatos exactos.\n\nNo repitas el mismo [tipo de negocio] ni el mismo [municipio] de manera consecutiva.\n\nEjemplos de posibles respuestas:\n\n\"Búscame médicos en Alcoy.\"\n\n\"Búscame inmobiliarias en Linares.\"\n\n\"Búscame clínicas dentales en Manresa.\"\n\nDevuelve solo una frase por vez. Cambia cada vez que se active."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        496,
        384
      ],
      "id": "489b839a-bbcb-4398-8ab9-d37b26c677b8",
      "name": "Message a model1",
      "credentials": {}
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://places.googleapis.com/v1/places:searchText",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Goog-Api-Key",
              "value": "[REDACTED]"
            },
            {
              "name": "X-Goog-FieldMask",
              "value": "places.displayName,places.websiteUri,places.formattedAddress,places.nationalPhoneNumber,places.rating,places.userRatingCount,places.businessStatus,places.googleMapsUri"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"textQuery\": {{ $('Mapeo de texto').item.json.text }},\n  \"maxResultCount\": 100,\n  \"languageCode\": \"es\",\n  \"regionCode\": \"ES\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1536,
        784
      ],
      "id": "7e2414cf-6a03-4ca9-b686-3e040bb76a84",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "content": "# 📩 Extracción y almacenamiento de emails\n\nEste flujo toma las URLs de empresas extraídas en la fase anterior y realiza scraping en cada una para localizar direcciones de correo electrónico, que luego se almacenan en Google Sheets para su posterior uso.\n\n---\n\n# 🧠 Descripción del proceso:\n\n➡️ **Loop Over Items**  \n🔁 Recorre una por una las URLs recopiladas anteriormente.\n\n➡️ **Scrape Company URLs**  \n🌐 Accede a cada sitio web de empresa para obtener su contenido HTML.\n\n➡️ **Wait**  \n⏱ Añade una pausa entre solicitudes para evitar bloqueos por parte de los servidores web.\n\n➡️ **Extract Emails**  \n📧 Escanea el contenido del sitio para localizar y extraer direcciones de email válidas.\n\n➡️ **Remove Duplicates2**  \n🧹 Elimina correos duplicados en caso de encontrar varios repetidos en el mismo sitio.\n\n➡️ **Google Sheets2**  \n📊 Almacena los resultados (URL + email) en una hoja de cálculo de Google Sheets, lista para uso comercial, contacto o análisis.\n\n---\n\nEste módulo cierra el ciclo de scraping automatizado, entregando una base de datos lista para aprovechar con leads locales y cualificados.",
        "height": 1880,
        "width": 1200
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1424,
        80
      ],
      "id": "29422ea6-9c8d-4b35-a726-d466a1a7c048",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=extrae el email de  {{ $('Extract URLs1').item.json.website }}",
        "options": {
          "systemMessage": "=Visita esta URL: {{ $('Extract URLs1').item.json.website }}\n\nAnaliza todo el contenido de la página web y extrae todos los emails que encuentres.\n\nInstrucciones:\n- Busca emails en formato estándar (usuario@dominio.com)\n- Busca emails ofuscados como \"usuario [at] dominio [dot] com\"  \n- Busca en JavaScript, CSS, enlaces mailto:, comentarios\n- NO incluyas emails de ejemplo o placeholder\n- Devuelve SOLO una lista de emails reales, uno por línea\n- Si no encuentras emails, responde \" \"\n- Devuelve un solo email, no más de uno\n\nURL: {{ $json.website }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2864,
        768
      ],
      "id": "b6f9eeeb-d700-4333-bc8a-bf0b8749a8a6",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2848,
        944
      ],
      "id": "f11f15d1-8c23-4f3b-ba1d-fc218c69f846",
      "name": "Google Gemini Chat Model",
      "credentials": {}
    },
    {
      "parameters": {
        "model": "openai/gpt-4o-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        720,
        592
      ],
      "id": "df84d31a-dad6-4ce7-b228-065c09542ba4",
      "name": "OpenRouter Chat Model",
      "credentials": {}
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "75da7bf2-be12-4dc2-9547-04dd55e4c239",
              "leftValue": "={{ $json.email_final }}",
              "rightValue": "@",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": false
        }
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        3872,
        1392
      ],
      "id": "320fe54a-e182-4eea-91ac-0dab2dd2065e",
      "name": "Filter3"
    },
    {
      "parameters": {
        "url": "={{ $json.website }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "e27bd3e1-d40f-49f2-ba8d-05f990b6115b",
      "name": "Get Main Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2224,
        1376
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const emailRegex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g;\nconst html = $input.all()[0].json.data || '';\n\n// Extraer emails del HTML de la página principal\nconst emails = html.match(emailRegex) || [];\n\n// Eliminar duplicados y filtrar emails válidos\nconst validEmails = [...new Set(emails)].filter(email => {\n  return email.includes('@') && \n         email.includes('.') && \n         !email.includes('example.') &&\n         !email.includes('test@') &&\n         !email.includes('noreply') &&\n         email.length > 5;\n});\n\n// Obtener la URL base\nlet baseUrl = $input.all()[0].json.base_url;\nif (!baseUrl) {\n  baseUrl = $('Loop Over Items').first().json.website; // Cambia por tu URL\n}\n\nreturn [{\n  website: baseUrl,\n  emails_found: validEmails,\n  total_count: validEmails.length,\n  scan_date: new Date().toISOString(),\n  source: 'main_page_only'\n}];"
      },
      "id": "988ec487-dedb-4633-a46b-267831643992",
      "name": "Extract Emails from Main Page",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2800,
        1168
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d3fde6ad-de5c-43ef-9acf-a5f019ea81ff",
              "name": "email_final",
              "value": "={{ $json.emails_found[0] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3008,
        1168
      ],
      "id": "778ac140-757c-4433-aa54-5d26be313a4e",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fdfa26a8-65fe-4bbf-8a5a-6709b560e848",
              "leftValue": "={{ $json.website }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2016,
        1488
      ],
      "id": "20157c8b-a791-4e80-a134-707b30938b57",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0ed19449-14d4-413f-beee-bca28c2717ea",
              "leftValue": "={{ $json.email_final }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3216,
        1168
      ],
      "id": "5d9e05e6-2ddf-43c2-9830-cb399700a673",
      "name": "If1"
    }
  ],
  "origin": "n8n",
  "pinData": {
    "Schedule Trigger1": [
      {
        "json": {
          "timestamp": "2025-09-15T22:44:25.009+02:00",
          "Readable date": "September 15th 2025, 10:44:25 pm",
          "Readable time": "10:44:25 pm",
          "Day of week": "Monday",
          "Year": "2025",
          "Month": "September",
          "Day of month": "15",
          "Hour": "22",
          "Minute": "44",
          "Second": "25",
          "Timezone": "Europe/Madrid (UTC+02:00)"
        }
      }
    ]
  },
  "repo": {
    "owner": "abdeidr",
    "name": "n8n"
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-16T17:25:16.651Z",
      "updatedAt": "2025-09-16T17:25:16.651Z",
      "role": "workflow:owner",
      "workflowId": "EFPmqMbur8Xplr1C",
      "projectId": "xdZYvePgLSibegaD"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-16T17:25:59.000Z",
  "versionId": "5c4e67ca-dc58-4676-b385-17a76331888c"
}